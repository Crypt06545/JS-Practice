// ‚ö° JavaScript Scope Explained (Block, Function, Lexical, and Hoisting)
// ======================================================================

// üîπ Scope ‡¶Æ‡¶æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‚Äî ‡¶ï‡ßã‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶ï‡ßã‡¶•‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá

// var c = 300   // 'var' has function/global scope (NOT block-scoped)
let a = 300; // 'let' has block scope

if (true) {
  let a = 10; // new variable (block-scoped)
  const b = 20; // block-scoped
  // console.log("INNER:", a); // Output: 10
}

// console.log(a); // Output: 300 (outer scope variable)
// console.log(b); // ‚ùå ReferenceError: b is not defined (block-scoped)
// console.log(c); // 300 (if var c was used)

// ============================================================
// üîπ Function Scope and Lexical Scope
// ============================================================

function one() {
  const username = "hitesh";

  function two() {
    const website = "youtube";
    console.log(username); // ‚úÖ Accesses variable from parent function (lexical scope)
  }

  // console.log(website); ‚ùå Error: website not defined
  two();
}

one();
// Output: hitesh

// ============================================================
// üîπ Nested if blocks (block scope example)
// ============================================================

if (true) {
  const username = "hitesh";
  if (username === "hitesh") {
    const website = " youtube";
    console.log(username + website); // ‚úÖ Works
  }
  // console.log(website); ‚ùå Not accessible here
}
// console.log(username); ‚ùå Not accessible outside

// ============================================================
// üîπ Function Hoisting
// ============================================================

console.log(addone(5)); // ‚úÖ Works because function declarations are hoisted

function addone(num) {
  return num + 1;
}

// ‚ö†Ô∏è Important: Function Expression (Not Hoisted)
addTwo(5); // ‚ùå Error: Cannot access 'addTwo' before initialization

const addTwo = function (num) {
  return num + 2;
};

// ============================================================
// üß† MEMORY + EXECUTION CONTEXT + HOISTING EXPLAINED
// ============================================================

/*
1Ô∏è‚É£ **Compilation Phase**
   - JS scans all code before execution.
   - Function declarations are fully hoisted (moved to top).
   - Variable declarations (var/let/const) are hoisted but not initialized.

2Ô∏è‚É£ **Execution Phase**
   - JS runs line-by-line.
   - When function is called ‚Üí new Execution Context created.

üî∏ Example:
   console.log(addone(5)) ‚úÖ Works
   Because during compilation ‚Üí `addone` already known in memory.

   console.log(addTwo(5)) ‚ùå Error
   Because `addTwo` is a variable (const), only declared not initialized yet.

3Ô∏è‚É£ **Scope Chain (Lexical Scope)**
   - Inner functions can access variables of outer functions.
   - Outer cannot access inner ones.
   - This is called *lexical scoping*.

4Ô∏è‚É£ **Block Scope**
   - let and const ‚Üí limited to { }
   - var ‚Üí ignored block scope (only function/global)

5Ô∏è‚É£ **Memory Clean-up**
   - After each function finishes ‚Üí its local memory is destroyed.
   - But if an inner function still references outer variables ‚Üí
     those stay alive in memory (Closure concept).
*/

// ‚úÖ Summary Notes:
// --------------------------------------
// üîπ let, const ‚Üí block scoped
// üîπ var ‚Üí function/global scoped
// üîπ Inner functions can access outer variables (lexical scope)
// üîπ Function declarations are hoisted
// üîπ Function expressions are NOT hoisted
// üîπ Each function call creates its own execution context
// üîπ Memory is cleared after execution (unless closures exist)
